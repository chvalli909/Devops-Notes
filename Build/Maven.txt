About Build tool Maven
Developers will be writing some code and as we cannot provide that code directly to the customers we use a Build tool called Maven.
To take the source code compile and convert it into executable format which can be jar war or ear and then deploy them into servers.
Both Developers and Devops engineers will be using Build tool heavily.
First we need to build the source code into a package to start the pipeline.
Majority of the files in Maven are written by developers such as pom.xml or source code creation but as a Devops Engineer you should also have a Good 
understanding of Maven bcoz if something went wrong you should be able to know who did the mistake.
Maven is not an executable file meaning that the system cannot find the Maven executable or it does not have the necessary permissions to execute it.
On some systems, you need to configure the system's PATH environment variable to include the path to the Maven executable. The PATH variable allows the system to locate and execute the Maven command from any directory. Verify if the PATH variable includes the Maven installation directory.
First we need to have Jdk for Maven and that too for which Maven which Java supports is also very important.
You should use Maven version of which your developers support not the one of your choice or the latest release.
Before knowing about Maven you have to know very well about the java project structure as Maven is built on Java and it is used to serve Java applications.
project-name/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── com/
│   │   │   │   └── yourcompany/
│   │   │   │       ├── controllers/
│   │   │   │       │   └── ...
│   │   │   │       ├── services/
│   │   │   │       │   └── ...
│   │   │   │       ├── models/
│   │   │   │       │   └── ...
│   │   │   │       └── Application.java
│   │   │   └── resources/
│   │   │       ├── application.properties
│   │   │       └── ...
│   │   └── resources/
│   │       └── ...
│   └── test/
│       ├── java/
│       │   ├── com/
│       │   │   └── yourcompany/
│       │   │       ├── controllers/
│       │   │       │   └── ...
│       │   │       ├── services/
│       │   │       │   └── ...
│       │   │       ├── models/
│       │   │       │   └── ...
│       │   │       └── ApplicationTest.java
│       └── resources/
│           └── ...
├── build.gradle
├── settings.gradle
├── README.md
└── ...

src/main/java: This directory contains the main Java source code of your project. The package structure typically follows the reverse domain name convention, such as com.yourcompany. Inside this package, you can have different directories for controllers, services, models, etc., depending on your application's architecture and design.

src/main/resources: This directory contains non-Java resources that your application needs, such as configuration files, property files, XML files, etc.

src/test/java: This directory contains the test source code for your project. It follows a similar structure as the main source code, with tests organized in packages based on the functionality they test.

src/test/resources: This directory contains resources specifically used for testing, such as test data files, configuration files, etc.

build.gradle (or pom.xml for Maven projects): This is the build configuration file for your project. It defines dependencies, build settings, and other project-specific configurations.

settings.gradle: This file is used to configure the overall project settings, such as the project name, modules, etc.

README.md: This is a text file that provides information about your project, including its purpose, how to set it up, and any other relevant details.


